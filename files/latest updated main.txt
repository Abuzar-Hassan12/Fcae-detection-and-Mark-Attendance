import cv2
import os
import pickle
import face_recognition
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import time
import re
from threading import Lock

# ========================
# CONFIGURATION SETTINGS
# ========================
ENCODING_FILE = 'Encoding File.p'
modeFolderPath = "C:\\Face-Detection-System\\Resources\\Modes"
imagebackground = cv2.imread('Resources/background.png')  
HOLIDAYS = ['23-03-2025', '01-05-2025', '14-08-2025']
FRAME_WIDTH, FRAME_HEIGHT = 640, 480
MODE_DISPLAY_DURATION = 5
FACE_MATCH_THRESHOLD = 0.415
ATTENDANCE_START_TIME = datetime.strptime("6:00:00 AM", "%I:%M:%S %p").time()
ATTENDANCE_END_TIME = datetime.strptime("10:00:00 AM", "%I:%M:%S %p").time()
COOLDOWN_SECONDS = 30  # Increased cooldown period
EXCEL_LOCK = Lock()  # Thread safety for Excel operations

# ========================
# GLOBAL STATE VARIABLES
# ========================
last_seen = {}
detected_students = set()
cooldown_tracker = {}
student_data = {}
current_mode = 0
mode_start_time = None
current_student_id = None
last_date_check = datetime.now()

# ========================
# INITIALIZATION FUNCTIONS
# ========================
def load_encodings():
    global founded_encodings, stud_ID
    with open(ENCODING_FILE, 'rb') as encode_file:
        founded_encodings, stud_ID = pickle.load(encode_file)

def load_mode_images():
    global imgModeList
    if not os.path.exists(modeFolderPath):
        raise FileNotFoundError(f"Directory not found: {modeFolderPath}")

    mode_files = sorted([f for f in os.listdir(modeFolderPath) if re.match(r"^mode[0-3]\.png$", f)], 
                       key=lambda x: int(x[4:-4]))
    
    if len(mode_files) != 4:
        raise ValueError(f"Need exactly 4 mode images. Found {len(mode_files)}")

    imgModeList = [cv2.imread(os.path.join(modeFolderPath, f)) for f in mode_files]

# ========================
# ATTENDANCE CORE FUNCTIONS
# ========================
def clean_columns(df):
    df.rename(columns=lambda x: x.strip(), inplace=True)
    required_columns = ['Student ID', 'Name', 'Total Attendance']
    for col in required_columns:
        if col not in df.columns:
            raise KeyError(f"Missing column: '{col}'")
    return df

def mark_off_if_needed(excel_file_path):
    today_date = datetime.now().strftime('%d-%m-%Y')
    weekday = datetime.now().weekday()
    
    if weekday >= 5 or today_date in HOLIDAYS:
        with EXCEL_LOCK:
            df = pd.read_excel(excel_file_path)
            df = clean_columns(df)

            status_col = f'{today_date} Status'
            time_col = f'{today_date} Time'

            if status_col not in df.columns:
                df[status_col] = 'Off'
                df[time_col] = ''
                df.to_excel(excel_file_path, index=False)
                print(f"Marked Off: {excel_file_path}")
                return True
        return False

def mark_absentees_before_attendance(excel_file_path):
    today_date = datetime.now().strftime('%d-%m-%Y')
    with EXCEL_LOCK:
        df = pd.read_excel(excel_file_path)
        df = clean_columns(df)

        status_col = f'{today_date} Status'
        time_col = f'{today_date} Time'

        if status_col not in df.columns:
            df[status_col] = 'A'
            df[time_col] = '00:00:00'
            updated = True
        else:
            updated = False

        if updated:
            df.to_excel(excel_file_path, index=False)
            print(f"Absentees marked: {excel_file_path}")
# ========================
# FILE PATH CONFIGURATION
# ========================
STEP_FILES = {
    "FY10": "C:/Face-Detection-System/stud_data/FY1.xlsx",
    "42": "C:/Face-Detection-System/stud_data/STEP 2.xlsx", 
    "43": "C:/Face-Detection-System/stud_data/STEP 3.xlsx"
}

def get_excel_path(student_id):
    """Get full path to Excel file with proper validation"""
    for prefix, path in STEP_FILES.items():
        if student_id.startswith(prefix):
            if not os.path.exists(path):
                raise FileNotFoundError(
                    f"Excel file not found: {path}\n"
                    f"Required for student ID: {student_id}\n"
                    "Check:\n"
                    "1. File exists at specified path\n"
                    "2. Student ID prefixes match configuration"
                )
            return path
    raise ValueError(
        f"No Excel mapping for ID: {student_id}\n"
        "Valid prefixes:\n" +
        "\n".join([f"{k} -> {v}" for k, v in STEP_FILES.items()])
    )       

def get_major(student_id):
    return os.path.basename(get_excel_path(student_id)).split('.')[0]

def MarkAttendance(student_id):
    global detected_students
    with EXCEL_LOCK:
        current_time = datetime.now()
        if not (ATTENDANCE_START_TIME <= current_time.time() <= ATTENDANCE_END_TIME):
            print(f"Attendance closed for {student_id}")
            return

        excel_path = get_excel_path(student_id)
        today_date = current_time.strftime('%d-%m-%Y')
        
        try:
            df = pd.read_excel(excel_path)
            df = clean_columns(df)
            df['Student ID'] = df['Student ID'].astype(str)

            status_col = f'{today_date} Status'
            time_col = f'{today_date} Time'

            if status_col not in df.columns:
                df[status_col] = 'A'
                df[time_col] = '00:00:00'

            student_row = df[df['Student ID'] == student_id]
            if student_row.empty:
                print(f"Student {student_id} not found")
                return

            idx = student_row.index[0]
            if df.at[idx, status_col] == 'P':
                return

            df.at[idx, status_col] = 'P'
            df.at[idx, time_col] = current_time.strftime("%I:%M:%S %p")
            df.at[idx, 'Total Attendance'] += 1
            
            df.to_excel(excel_path, index=False)
            detected_students.add(student_id)
            print(f"Marked Present: {student_id}")

        except Exception as e:
            print(f"Excel Error: {str(e)}")

def LoadStudentName(student_id):
    try:
        excel_path = get_excel_path(student_id)
        with EXCEL_LOCK:
            df = pd.read_excel(excel_path)
            df = clean_columns(df)
            row = df[df['Student ID'] == student_id].iloc[0]
            return row['Name'], row['Total Attendance']
    except:
        return f"Student {student_id}", 0

# ========================
# VIDEO PROCESSING FUNCTIONS
# ========================
def reset_daily_state():
    global last_seen, detected_students, cooldown_tracker, last_date_check
    now = datetime.now()
    if now.date() != last_date_check.date():
        print("\n--- NEW DAY RESET ---")
        detected_students.clear()
        cooldown_tracker.clear()
        last_seen.clear()
        last_date_check = now
        
        step_files = [
            'C:/Face-Detection-System/stud_data/FY1.xlsx',
            'C:/Face-Detection-System/stud_data/STEP 2.xlsx',
            'C:/Face-Detection-System/stud_data/STEP 3.xlsx'
        ]
        for path in step_files:
            mark_absentees_before_attendance(path)

def process_frame(frame):
    global current_mode, mode_start_time, current_student_id
    
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
    rgb_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
    
    face_locations = face_recognition.face_locations(rgb_frame)
    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
    
    for encoding, location in zip(face_encodings, face_locations):
        matches = face_recognition.compare_faces(founded_encodings, encoding, FACE_MATCH_THRESHOLD)
        face_distances = face_recognition.face_distance(founded_encodings, encoding)
        
        if not matches[np.argmin(face_distances)]:
            continue
            
        student_id = stud_ID[np.argmin(face_distances)]
        last_seen[student_id] = time.time()
        
        if student_id not in detected_students:
            MarkAttendance(student_id)
            detected_students.add(student_id)
            current_mode = 1
            mode_start_time = time.time()
            current_student_id = student_id
            
            if student_id not in student_data:
                name, attendance = LoadStudentName(student_id)
                img_path = f'C:/Face-Detection-System/resized_images/{student_id}.jpg'
                student_data[student_id] = {
                    'name': name,
                    'attendance': attendance,
                    'image': cv2.imread(img_path) if os.path.exists(img_path) else None
                }
        else:
            if time.time() - cooldown_tracker.get(student_id, 0) > COOLDOWN_SECONDS:
                current_mode = 3
                mode_start_time = time.time()
                cooldown_tracker[student_id] = time.time()

# ========================
# MAIN SYSTEM LOOP
# ========================
def main():
    global current_mode, mode_start_time
    
    # Initialization
    load_encodings()
    load_mode_images()
    
    for path in STEP_FILES.values():
        if not os.path.exists(path):
            raise SystemExit(
                f"Critical error: Required file not found\n"
                f"Missing: {path}\n"
                "Please check:\n"
                "1. File exists at specified location\n"
                "2. Path matches your system configuration\n"
                "3. No typos in file names"
            )

    # Holiday and absence marking
    for path in STEP_FILES.values():
        if mark_off_if_needed(path):
            print("System exiting due to holiday/weekend")
            return
        mark_absentees_before_attendance(path)

    cap = cv2.VideoCapture(0)
    cap.set(3, FRAME_WIDTH)
    cap.set(4, FRAME_HEIGHT)
    time.sleep(2)

    while True:
        success, img = cap.read()
        if not success:
            continue

        reset_daily_state()
        frame_bg = imagebackground.copy()
        frame_bg[162:162+480, 55:55+640] = img
        
        process_frame(img)
        
        # Mode transitions
        if current_mode in [1, 2, 3] and mode_start_time:
            elapsed = time.time() - mode_start_time
            if elapsed > MODE_DISPLAY_DURATION:
                if current_mode == 1:
                    current_mode = 2
                    mode_start_time = time.time()
                elif current_mode == 2:
                    current_mode = 0
                    if current_student_id:
                        cooldown_tracker[current_student_id] = time.time()
                    mode_start_time = None
                elif current_mode == 3:
                    current_mode = 0
                    mode_start_time = None

        # UI rendering
        frame_bg[44:44+633, 808:808+414] = imgModeList[current_mode]
        
        if current_mode == 1 and current_student_id:
            student = student_data.get(current_student_id)
            if student:
                if student['image'] is not None:
                    frame_bg[175:175+216, 909:909+216] = student['image']
                
                (w, h), _ = cv2.getTextSize(student['name'], cv2.FONT_HERSHEY_COMPLEX, 1, 1)
                x_pos = 808 + (414 - w) // 2
                
                cv2.putText(frame_bg, str(student['attendance']), (861, 125),
                           cv2.FONT_HERSHEY_COMPLEX, 1, (255,255,255), 1)
                cv2.putText(frame_bg, student['name'], (x_pos, 445),
                           cv2.FONT_HERSHEY_COMPLEX, 1, (50,50,50), 1)
                cv2.putText(frame_bg, f"ID: {current_student_id}", (1006, 493),
                           cv2.FONT_HERSHEY_COMPLEX, 0.5, (255,255,255), 1)
                cv2.putText(frame_bg, get_major(current_student_id), (1006, 550),
                           cv2.FONT_HERSHEY_COMPLEX, 0.5, (255,255,255), 1)

        cv2.imshow("STEP School Talagang Campus", frame_bg)
        key = cv2.waitKey(1) & 0xFF
        if key in (27, ord('q')):
            print("User requested exit. Exiting...")
            break
        if cv2.getWindowProperty("STEP School Talagang Campus", cv2.WND_PROP_VISIBLE) < 1:
                print("Window closed by user. Exiting...")
                break
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()